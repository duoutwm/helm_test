apiVersion: apps/v1                                 # Используемая версия API для описания Deployment
kind: Deployment                                    # Тип объекта - Deployment
metadata:
  name: "{{ .Release.Name }}-deployment"            # Название Deployment (зависит от имени релиза)
spec:
  replicas: {{ .Values.replicas }}                  # Количество реплик (подов)
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-dind"               # Метка, по которой данный Deployment будет выбирать поды
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-dind"             # Метка, совпадающая с selector выше
    spec:
      containers:
        - name: dind                                # Имя контейнера, в котором будем поднимать Docker in Docker
          image: "{{ .Values.image }}:{{ .Values.tag }}"  # Образ и тег контейнера dind
          securityContext:
            privileged: true                        # Для Docker in Docker необходим привилегированный режим
          env:
            - name: DOCKER_HOST
              value: "tcp://127.0.0.1:2375"         # Переменная окружения, указывающая, что Docker доступен по TCP
            - name: HOSTNAME
              value: "dblab-static-hostname"        # Статический хостнейм для dbLab
            - name: ADMIN_PASSWORD
              value: "{{ .Values.dblab.dbAdminPassword }}"  # Пароль для админского Web-UI dbLab
          volumeMounts:
            - name: dblab-storage
              mountPath: "/var/lib/dblab"           # Хранилище dbLab внутри контейнера dind
            - name: config-volume
              mountPath: "/home/dblab/configs/server.yml"  # Файл с конфигурацией dbLab
              subPath: "server.yml"                 # Указываем, что берем именно файл server.yml из ConfigMap
            - name: docker-socket
              mountPath: "/var/run/"                # Маунтим временный каталог для сокета Docker (DinD + dbLab)
          command: [ "sh", "-c" ]                   # Запуск контейнера через шелл, чтобы выполнить несколько команд
          args:
            - |
              # 1) Запускаем Docker Daemon в фоне
              dockerd --host=tcp://0.0.0.0:2375 --host=unix:///var/run/docker.sock &
              sleep 5                               # Даем время Docker запуститься

              # 2) Запускаем dbLab внутри DinD
              echo "Запускаем dbLab..."
              docker run -d --name dblab \
                -e HOSTNAME=${HOSTNAME} \
                -e ADMIN_PASSWORD=${ADMIN_PASSWORD} \
                -e DOCKER_HOST=unix:///var/run/docker.sock \
                -v /var/lib/dblab:/var/lib/dblab \
                -v /home/dblab/configs/server.yml:/home/dblab/configs/server.yml \
                -v /var/run:/var/run \
                "{{ .Values.dblab.image }}:{{ .Values.dblab.tag }}" \
                -c /home/dblab/configs/server.yml

              # 3) Оставляем процесс активным, чтобы контейнер не завершался
              tail -f /dev/null
      volumes:
        - name: dblab-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-pvc      # Имя PVC для хранения данных dbLab
        - name: config-volume
          configMap:
            name: {{ .Release.Name }}-config        # ConfigMap с файлом server.yml
        - name: docker-socket
          emptyDir: {}                              # Пустой том, который будем использовать как Docker socket dir
