apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      initContainers:
        - name: install-docker
          image: ubuntu:22.04
          command:
            - /bin/bash
            - -c
            - |
              set -e
              # Устанавливаем procps для kill
              apt-get update
              apt-get install -y procps
              # Принудительно завершаем все процессы, использующие сокет
              echo "Checking for running Docker processes"
              for pid in $(ps aux | grep -E 'dockerd|docker' | grep -v 'grep' | awk '{print $2}'); do
                echo "Killing process with PID $pid"
                kill -9 $pid || true  # Принудительно завершаем процесс
              done
              # Убедимся, что сокет можно удалить
              if [ -e /var/run/docker_new.sock ]; then
                echo "Removing existing docker_new.sock"
                rm -rf /var/run/docker_new.sock  # Удаляем сокет
              fi
              # Повторно проверяем сокет через несколько секунд
              sleep 1
              if [ -e /var/run/docker_new.sock ]; then
                echo "Attempting to remove docker_new.sock again"
                rm -rf /var/run/docker_new.sock  # Пробуем ещё раз удалить сокет
              fi
              # Установка Docker
              apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              apt-get update
              apt-get install -y docker-ce
              # Запуск Docker в фоновом режиме с новым сокетом
              dockerd --host=unix:///var/run/docker_new.sock &
              sleep 5
              while ! docker ps >/dev/null 2>&1; do sleep 2; done
          volumeMounts:
            - name: docker-socket
              mountPath: /var/run/docker_new.sock
              readOnly: false  # Разрешаем запись на сокет, чтобы Docker работал

      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /home/dblab/bin/dblab-server
          volumeMounts:
            - name: docker-socket
              mountPath: /var/run/docker_new.sock  # Монтируем новый сокет Docker
            - name: config-volume
              mountPath: /home/dblab/configs/server.yml
              subPath: config.yml
          ports:
            - containerPort: {{ .Values.config.server.port }}
              name: api
            - containerPort: {{ .Values.config.server.embeddedUI.port }}
              name: ui

      volumes:
        - name: docker-socket
          emptyDir: {}  # Используем emptyDir для создания сокета внутри контейнера
        - name: config-volume
          configMap:
            name: {{ .Release.Name }}-config
