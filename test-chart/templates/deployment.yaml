apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "test-chart.fullname" . }}  # Уникальное имя для деплоймента, используется функция для создания полного имени
  labels:
    {{- include "test-chart.labels" . | nindent 4 }}  # Метки для организации и поиска деплоймента
spec:
  replicas: {{ .Values.replicaCount }}  # Количество реплик, настраивается через values.yaml
  selector:
    matchLabels:
      {{- include "test-chart.selectorLabels" . | nindent 6 }}  # Метки, используемые для привязки подов к этому деплойменту
  template:
    metadata:
      labels:
        {{- include "test-chart.labels" . | nindent 8 }}  # Метки для каждого пода, созданного этим деплойментом
        app: {{ .Release.Name }}-folder  # Дополнительная метка для идентификации приложения
    spec:
      serviceAccountName: {{ include "test-chart.serviceAccountName" . }}  # Имя сервисного аккаунта для подов
      containers:
        # Контейнер с busybox, который создаёт папку и скачивает изображение
        - name: folder-container
          image: busybox  # Используется образ busybox
          command:
            - sh
            - -c
            - |
              # Создание директории и скачивание изображения по указанному URL
              mkdir -p /mnt/data{{ .Values.folderPath }} && \
              wget -O /mnt/data{{ .Values.folderPath }}/image.jpg {{ .Values.imageURL }} && \
              # Оставляем контейнер в активном состоянии, чтобы он не завершался
              sleep 3600
          volumeMounts:
            - name: data-volume  # Монтирование volume для хранения данных
              mountPath: /mnt/data
        
        # Контейнер с nginx, который сервирует скачанное изображение
        - name: nginx  # Имя контейнера, которое будет отображаться в Kubernetes.
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"  # Образ nginx с тегом, задается в values.yaml
          command:
            - sh  # Используем команду оболочки `sh` для выполнения последующих команд.
            - -c  # Флаг для передачи нескольких команд в оболочке.
            - |
              # Создаем конфигурационный файл nginx:
              echo 'server {
                      listen {{ .Values.nginxPort }};  # Устанавливаем порт, на котором Nginx будет слушать (14080).
                      server_name localhost;  # Устанавливаем имя сервера (localhost).

                      location / {
                          root /usr/share/nginx/html;  # Указываем корневую директорию, где будут находиться файлы для сервирования.
                          index index.html index.htm;  # Указываем, какие файлы по умолчанию будут открываться при доступе.
                      }
                    }' > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'
              # Сохраняем вышеуказанную конфигурацию в файл `/etc/nginx/conf.d/default.conf`.
              # Запускаем nginx с флагом `daemon off;`, чтобы процесс работал на переднем плане.         
          ports:
            - containerPort: {{ .Values.nginxPort }}  # Порт, на котором Nginx будет слушать, задаётся в values.yaml
              protocol: TCP
          volumeMounts:
            - name: data-volume  # Монтирование того же volume, чтобы Nginx мог сервировать файлы
              mountPath: /usr/share/nginx/html
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 14 }}  # Проба на готовность, параметры берутся из values.yaml
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 14 }}  # Проба на живучесть, параметры берутся из values.yaml

      volumes:
        - name: data-volume  # Определение volume, который будет использоваться обоими контейнерами
          hostPath:
            path: /mnt/data  # Локальный путь на хосте, который будет монтироваться в контейнеры
            type: Directory
